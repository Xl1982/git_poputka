import logging
import random
import re
import time
from enum import Enum
from aiogram.dispatcher.filters import Command, ChatTypeFilter
import aiogram
print(aiogram.__version__)
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import sqlite3
from config import TOKEN_POPUTKA
API_TOKEN = TOKEN_POPUTKA
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


class RideInputState(Enum):
    NAME = 0
    SEATS = 1
    FROM_PLACE = 2
    TO_PLACE = 3
    DATE = 4
    TIME = 5
    PRICE = 6

user_states = {}
user_data = {}

btn_goto_bot = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url="https://t.me/poputka3_bot")
inline_kb1 = InlineKeyboardMarkup().add(btn_goto_bot)

keyboard_private = InlineKeyboardMarkup()
btn_add_private = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="add")
btn_show_private = InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏", callback_data="show")
keyboard_private.add(btn_add_private, btn_show_private)



keyboard_group = InlineKeyboardMarkup()
btn_goto_bot = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", url="https://t.me/poputka3_bot")  # –ó–∞–º–µ–Ω–∏—Ç–µ YourBotUsername –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
btn_add_group = InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏", url="https://t.me/poputka3_bot")
keyboard_group.add(btn_goto_bot, btn_add_group)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        with sqlite3.connect('rides.db') as conn:
            conn.execute("""
            CREATE TABLE IF NOT EXISTS rides (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                name TEXT,
                seats INTEGER,
                from_place TEXT,
                to_place TEXT,
                date TEXT,
                time TEXT,
                price_per_person INTEGER
            )
            """)
            conn.commit()
    except Exception as e:
        print(f"Error initializing database: {str(e)}")


def add_ride(user_id, name, seats, from_place, to_place, date, time, price_per_person):  # –î–æ–±–∞–≤–∏—Ç—å price_per_person
    with sqlite3.connect('rides.db') as conn:
        conn.execute("INSERT INTO rides (user_id, name, seats, from_place, to_place, date, time, price_per_person) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                     (user_id, name, seats, from_place, to_place, date, time, price_per_person))
        conn.commit()

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import BoundFilter
from config import ADMINS

class IsGroup(BoundFilter): #
    async def check(self, message: types.Message):
        return message.chat.type in (
            types.ChatType.GROUP,
            types.ChatType.SUPERGROUP,
        )


class IsAdminFilter(BoundFilter): # —Ñ–∏–ª—å—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥
    async def check(self, message: types.Message):
        return message.from_user.id in ADMINS

class IsPrivate(BoundFilter):
   async def check(self, message: types.Message):
       return message.chat.type == types.ChatType.PRIVATE


mess1= f"""
üöó –ü–æ–∏—Å–∫ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –Ω–∞ –∞–≤—Ç–æ –∏–∑ –¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∏ üöó

üöò –í–æ–¥–∏—Ç–µ–ª–∏:
–ì–æ—Ç–æ–≤—ã –ø–æ–¥–≤–µ–∑—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?
ü§î –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É" –Ω–∏–∂–µ!

üõ£Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–æ–µ–∑–¥–∫–∏ —Å üìÖ –¥–∞—Ç–æ–π, ‚è∞ –≤—Ä–µ–º–µ–Ω–µ–º –∏ üí∂ —Ü–µ–Ω–æ–π –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.

üîç –ü–∞—Å—Å–∞–∂–∏—Ä—ã:
–ò—â–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–æ –ê–ª–∏–∫–∞–Ω—Ç–µ, –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π?
üìç –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üöï"""
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        await message.answer(mess1, reply_markup=keyboard_group)

    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.", reply_markup=keyboard_private)

@dp.callback_query_handler(lambda c: c.data == 'add')
async def process_callback_add(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    user_states[user_id] = RideInputState.NAME
    user_data[user_id] = {}
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")


#–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–≤–æ–¥–æ–º
# –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–∫–∞—Ö
def get_rides_info():
    with sqlite3.connect('rides.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM rides")
        rows = cursor.fetchall()

        rides_info = []
        for row in rows:
            ride_info = {
                'name': row[2],
                'seats': row[3],
                'from_place': row[4],
                'to_place': row[5],
                'date': row[6],
                'time': row[7],
                'price_per_person': row[8] if len(row) > 8 else "N/A"
            }
            rides_info.append(ride_info)
        return rides_info

@dp.callback_query_handler(lambda c: c.data == 'show')
async def process_callback_show(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    rides_info = get_rides_info()
    if not rides_info:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫")
    else:
        for ride in rides_info:
            ride_message = f"–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è: [{ride['name']}](tg://user?id={callback_query.from_user.id})\n" \
                           f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞: {ride['seats']}\n" \
                           f"–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride['from_place']}\n" \
                           f"–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {ride['to_place']}\n" \
                           f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {ride['date']}\n" \
                           f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride['time']}\n" \
                           f"–¶–µ–Ω–∞ –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞: {ride['price_per_person']} –µ–≤—Ä–æ.\n"
            await bot.send_message(callback_query.from_user.id, ride_message, parse_mode=ParseMode.MARKDOWN)
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_private)


@dp.message_handler(lambda message: message.from_user.id in user_states)
async def process_input(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state == RideInputState.NAME:
        user_data[user_id]["name"] = message.text
        user_states[user_id] = RideInputState.SEATS
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ?")

    elif state == RideInputState.SEATS:
        try:
            seats = int(message.text)
            user_data[user_id]["seats"] = seats
            user_states[user_id] = RideInputState.FROM_PLACE
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç.")


    elif state == RideInputState.FROM_PLACE:
        user_data[user_id]["from_place"] = message.text
        user_states[user_id] = RideInputState.TO_PLACE
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")


    elif state == RideInputState.TO_PLACE:
        user_data[user_id]["to_place"] = message.text
        user_states[user_id] = RideInputState.DATE
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.04.2023):")

    elif state == RideInputState.DATE:
        user_data[user_id]["date"] = message.text
        user_states[user_id] = RideInputState.TIME
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):")

    elif state == RideInputState.TIME:
        user_data[user_id]["time"] = message.text
        user_states[user_id] = RideInputState.PRICE  # Move to the PRICE state after getting the time
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –µ–≤—Ä–æ:")

    elif state == RideInputState.PRICE:
        try:
            price = int(message.text)
            user_data[user_id]["price_per_person"] = price

            add_ride(user_id, user_data[user_id]["name"], user_data[user_id]["seats"], user_data[user_id]["from_place"],
                     user_data[user_id]["to_place"], user_data[user_id]["date"], user_data[user_id]["time"], price)

            await send_ride_to_chat(user_data[user_id])  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ –≤ —á–∞—Ç

            await message.answer("–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            del user_states[user_id]
            del user_data[user_id]
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_private)

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")


from config import CHAT_ID
async def send_ride_to_chat(ride_info):
    chat_id = CHAT_ID  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
    message_text = (
        f"–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ üöó\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è: {ride_info['name']}\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞: {ride_info['seats']}\n"
        f"–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride_info['from_place']}\n"
        f"–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {ride_info['to_place']}\n"
        f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {ride_info['date']}\n"
        f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ride_info['time']}\n"
        f"–¶–µ–Ω–∞ –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞: {ride_info['price_per_person']} –µ–≤—Ä–æ."
    )
    await bot.send_message(chat_id, message_text)


if __name__ == '__main__':
    init_db()

    executor.start_polling(dp, skip_updates=True)

